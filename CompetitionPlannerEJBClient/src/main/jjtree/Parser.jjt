options {
	IGNORE_CASE = true;
	UNICODE_INPUT = true;
	STATIC = false;
	VISITOR = true;
	MULTI = true;
	NODE_DEFAULT_VOID = false;
	NODE_PREFIX = "";
	NODE_CLASS = "org.planner.util.ExpressionParser.ExNode";
}

PARSER_BEGIN(Parser)

package org.planner.util;

public class Parser {
	protected boolean inAssignment;
}

PARSER_END(Parser)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL>
  >
|
  < #DECIMAL_LITERAL: (["0"-"9"])+ >
}

TOKEN :
{
	< WENN: "wenn" >
|
	< DANN: "dann" >
|
	< ANSONSTEN: "ansonsten" >
|
	< UND: "und" >
|
	< ODER: "oder" >
|
	< IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
	< #LETTER: ["_","\u00e4","\u00f6","\u00fc","\u00df","a"-"z","A"-"Z","\u00c4","\u00d6","\u00dc"] >
|
	< #DIGIT: ["0"-"9"] >
}

void Completion() #void : {}
{
	IfELseStatements()
}

SimpleNode Start() #Start : {}
{
	IfELseStatements()
	<EOF>

	{ return jjtThis; }
}

void IfELseStatements() #void : {}
{
	( IfELseStatement() )+
}

void IfELseStatement() #void : {}
{
	(
		IfStatement()
		[
			ElseStatement()
		]
	) #IfElse(>1)
}

void ElseStatement() #void : {}
{
	"ansonsten"
	{ inAssignment = true; }
		(
			IfELseStatement()
			|
			AssignmentExpressions()
		)
	{ inAssignment = false; }
}

void IfStatement() #void : {}
{
	(
		"wenn" { inAssignment = false; } Expression() "dann" { inAssignment = true; } AssignmentExpressions() { inAssignment = false; }
	) #If(>1)
}

void Expression() #void : {}
{
	ConditionalOrExpression()
}

void ConditionalOrExpression() #void : {}
{
	(
		ConditionalAndExpression() ( "oder" ConditionalAndExpression() )* 
	) #Or(>1)
}

void ConditionalAndExpression() #void : {}
{
	(
		EqualityExpression() ( "und" EqualityExpression() )*
	) #And(>1)
}

void EqualityExpression() #void : {
	Token t = null;
}
{
	(
		RelationalExpression() ( ( t = "<>" | t = "=" ) { jjtThis.addOp(t.image); } RelationalExpression() )*
	) #Equals(>1)
}

void RelationalExpression() #void : {
	Token t = null;
}
{
	(
		AdditiveExpression() ( ( t = "<" | t = ">" | t = "<=" | t = ">=" )  { jjtThis.addOp(t.image); } AdditiveExpression() )*
	) #Relation(>1)
}

void AdditiveExpression() #void : {
	Token t = null;
}
{
	(
		MultiplicativeExpression() ( ( t = "+" | t = "-" ) { jjtThis.addOp(t.image); } MultiplicativeExpression() )*
	) #Add(>1)
}

void MultiplicativeExpression() #void : {
	Token t = null;
}
{
	(
		UnaryExpression() ( ( t =  "*" | t = "/" | t = "%" ) { jjtThis.addOp(t.image); } UnaryExpression() )*
	) #Multiply(>1)
}

void UnaryExpression() #void : {}
{
	(
		"(" Expression() ")"
	) #Parenthesized
	
	| Identifier()
	| IntegerLiteral()
}

void AssignmentExpressions() #void : {}
{
	(
		AssignmentExpr() ( "," AssignmentExpr() )*
	) #Assignments(>1)
}

void AssignmentExpr() #void : {}
{
	(
		Identifier() "=" IntegerLiteral()
	) #Assign(>1)
}

void Identifier() : {
	Token t;
}
{
	t = <IDENTIFIER>
	{
		jjtThis.jjtSetValue(t.image);
	}
}

void IntegerLiteral() : {
	Token t;
}
{
	t = <INTEGER_LITERAL>
	{
		jjtThis.jjtSetValue(t.image);
	}
}
